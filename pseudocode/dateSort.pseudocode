FUNCTION mergeSortDates(dates):

    # Exit condition
    IF length of dates is equal to 1 THEN
        RETURN dates
    END IF


    # Divide list into two halves
    mid = floor(length of dates / 2)
    left_dates = sublist of dates from 0 to mid-1
    right_dates = sublist of dates from mid to end


    # Recursively sort each half
    left_dates = CALL mergeSortDates(left_dates)
    right_dates = CALL mergeSortDates(right_dates)


    # Merge the two halves together
    sorted_dates = empty list
    i = j = 0
    WHILE i is less than length of left_dates AND j is less than length of right_dates DO
        date = left_dates[i]
        today = right_dates[j]
        IF (date[2] < today[2] OR
            (date[2] == today[2] AND date[1] < today[1]) OR
            (date[2] == today[2] AND date[1] == today[1] AND date[0] < today[0])) THEN
            append date to sorted_dates
            i += 1
        ELSE
            append today to sorted_dates
            j += 1
        END IF
    END WHILE


    # Add any remaining elements in the left list
    WHILE i is less than length of left_dates DO
        append left_dates[i] to sorted_dates
        i += 1
    END WHILE


    # Add any remaining elements in the right list
    WHILE j is less than length of right_dates DO
        append right_dates[j] to sorted_dates
        j += 1
    END WHILE


    # Return the sorted list
    RETURN sorted_dates
END FUNCTION
